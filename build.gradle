buildscript {
    ext.kotlin_version = '1.2.20'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'net.minecrell.licenser' version '0.3'
    id 'org.ajoberstar.grgit' version '1.7.2'
    id 'com.github.johnrengelman.shadow' version '2.0.2'
}

group 'com.dumptruckman.kaddy'
version '0.1-SNAPSHOT'

subprojects {
    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'net.minecrell.licenser'
    apply plugin: 'org.ajoberstar.grgit'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'http://repo.onarandombox.com/content/groups/public/'
        }
        mavenLocal()
        maven {
            url 'https://repo.aikar.co/nexus/content/repositories/aikar/'
        }
    }

    dependencies {
        compile 'ninja.leaping.configurate:configurate-hocon:3.3'
        compile('com.dumptruckman.dtmlibs:config:1.0-SNAPSHOT') {
            exclude group: 'org.jetbrains.kotlin'
        }
        compile('io.github.microutils:kotlin-logging:1.5.3') {
            exclude group: 'org.jetbrains.kotlin'
        }
        compile 'org.slf4j:slf4j-api:1.7.21'
        compile 'ch.qos.logback:logback-classic:1.1.3'
        compile 'com.google.auto.service:auto-service:1.0-rc3'
        compile('com.dumptruckman.dtmlibs:logback-logging:1.0-SNAPSHOT') {
            exclude group: 'org.jetbrains.kotlin'
        }
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    license {
        header rootProject.file("license/HEADER.txt")
        include '**/*.kt'
        include '**/*.java'
        newLine false
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier 'sources'
        from sourceSets.main.allSource
        from "${project.rootDir}/LICENSE.txt"
    }

    artifacts {
        archives sourcesJar
    }
}

project (':kaddy-config') {
    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile("co.aikar:acf-jda:0.5.0-SNAPSHOT")
    }
}

project(':kaddy-bot') {
    repositories {
        maven {
            url 'https://dl.bintray.com/kotlin/exposed/'
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile("com.xenomachina:kotlin-argparser:2.0.3") {
            exclude group: 'org.jetbrains.kotlin'
        }
        compile "com.googlecode.lanterna:lanterna:3.0.0"
        compile 'net.dv8tion:JDA:3.5.0_328'
        compile 'io.github.config4k:config4k:0.3.2'
        compile project(':kaddy-config')
        compile 'com.h2database:h2:1.4.196'
        compile 'org.jetbrains.exposed:exposed:0.9.1'
        compile 'org.pf4j:pf4j:2.1.0'

        testCompile group: 'junit', name: 'junit', version:'4.12'
        testCompile group: 'org.powermock', name: 'powermock-module-junit4', version:'1.6.1'
        testCompile group: 'org.powermock', name: 'powermock-api-easymock', version:'1.6.1'
        testCompile group: 'org.powermock', name: 'powermock-api-mockito', version:'1.6.1'
        testCompile group: 'org.easymock', name: 'easymock', version:'3.4'
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    }

    task runBot(type: JavaExec, dependsOn: classes) {
        main = 'kaddy.KaddyBot'
        classpath = sourceSets.main.runtimeClasspath
    }

    task deleteDependencies(type: Delete) {
        delete "${project.rootDir}/libs"
    }

    task configureDependencies(type: Copy, dependsOn: deleteDependencies) {
        from configurations.compile
        into "${project.rootDir}/libs"
    }

    task deleteRuntime(type: Delete) {
        delete "${project.rootDir}/runtime"
    }

    task configureRuntime(type: Copy, dependsOn: deleteRuntime) {
        from("${project.buildDir}/libs") {
            exclude '*-sources.jar'
        }
        into "${project.rootDir}/runtime"
    }

    task start(type: JavaExec, dependsOn: [configureDependencies, configureRuntime]) {
        doFirst {
            if (!new File("${project.rootDir}/runtime").exists()) {
                throw new GradleException("runtime missing")
            }
            if (!new File("${project.rootDir}/libs").exists()) {
                throw new GradleException("libs missing")
            }
        }

        main = 'kaddy.KaddyBot'
        classpath = files("${project.rootDir}/runtime/*", "${project.rootDir}/libs/*")
        //args(["${project.token}"])
    }

    task cleanAll(type: Delete, dependsOn: [clean, deleteDependencies, deleteRuntime])

    task gitPull(type: Exec) {
        description 'Pulls git.'
        commandLine "git", "pull"
    }
}

project(':kaddy-daemon') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile 'net.sf.jopt-simple:jopt-simple:5.0.4'
        compile project(':kaddy-config')
    }

    shadowJar {
        baseName = project.name
        classifier = null
    }

    jar.finalizedBy shadowJar

    jar {
        manifest {
            attributes(
                    'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                    'Main-Class': 'kaddy.daemon.Main'
            )
        }
    }
}